name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docker: ${{ steps.filter.outputs.docker }}
      docker-compose: ${{ steps.filter.outputs.docker-compose }}
    steps:
    - uses: actions/checkout@v4

    - name: Identify changed files
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          python:
            - '**/*.py'
            - '**/pyproject.toml'
            - '**/uv.lock'
          docker:
            - '**/Dockerfile*'
            - '**/.dockerignore'
            - 'services/**'
          docker-compose:
            - 'docker-compose*.yml'
            - '.env.example'

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install uv
      run: pip install uv
        
    - name: Cache Python virtual environment
      uses: actions/cache@v4
      id: cache-venv
      with:
        path: .venv
        key: ${{ runner.os }}-python-3.11-${{ hashFiles('**/uv.lock') }}
        
    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev]" -e ./shared -e ./services/*
        
    - name: Run Ruff linter and formatter
      run: |
        .venv/bin/ruff check .
        .venv/bin/ruff format --check .
      
    - name: Run type checking
      run: |
        .venv/bin/mypy .
        .venv/bin/check-annotations . --config-section tool.coverage.run --config-exclude-key omit

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [changes, lint-and-format]
    if: needs.changes.outputs.python == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install uv
      run: pip install uv
      
    - name: Cache Python virtual environment
      uses: actions/cache@v4
      id: cache-venv
      with:
        path: .venv
        key: ${{ runner.os }}-python-3.11-${{ hashFiles('**/uv.lock') }}
        
    - name: Install dependencies
      # Always install dependencies, cache will speed this up if available
      run: |
        uv venv
        uv pip install -e ".[dev]" -e ./shared -e ./services/*
        
    - name: Run Bandit security scan
      run: .venv/bin/bandit -r . -c pyproject.toml

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [changes, lint-and-format]
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && needs.changes.outputs.python == 'true')

    env:
      NEO4J_PASSWORD: fake_test_neo4j_password_123
      POSTGRES_PASSWORD: fake_test_postgres_password_456
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install uv
      run: pip install uv

    - name: Cache Python virtual environment
      uses: actions/cache@v4
      id: cache-venv
      with:
        path: .venv
        key: ${{ runner.os }}-python-3.11-${{ hashFiles('**/uv.lock') }}
        
    - name: Install dependencies
      # Always install dependencies, cache will speed this up if available
      run: |
        uv venv
        uv pip install -e ".[dev]" -e ./shared -e ./services/*
        
    - name: Run tests
      run: |
        export PYTHONPATH=$(pwd)
        .venv/bin/pytest -v --tb=short tests/ shared/tests/ services/aclarai-core/tests/ services/aclarai-ui/tests/ services/scheduler/tests/ services/vault-watcher/tests/

  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.docker == 'true'
    strategy:
      matrix:
        service: [aclarai-core, vault-watcher, scheduler, aclarai-ui]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build Docker image
      run: >
        docker build --tag aclarai-${{ matrix.service }}:test -f ./services/${{ matrix.service }}/Dockerfile .

  docker-compose-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.docker-compose == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Validate docker-compose
      run: |
        cp .env.example .env
        docker compose config --quiet